// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                String       @id @default(cuid())
  name              String
  email             String       @unique
  password          String
  address           String
  admin_url_profile String?
  credit_cards      CreditCard[]
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
}

model Moderator {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  moderator_url_profile String
  password              String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

model Advertiser {
  id                             String        @id @default(cuid())
  amount                         Float?
  nano_id                        String        @unique
  name                           String
  CPF                            String
  company_name                   String
  CNPJ                           String?
  url_profile_cover              String?
  url_profile_company_logo_cover String?
  company_adress                 String
  email                          String        @unique
  password                       String
  address                        String
  credit_cards                   CreditCard[]
  Aucts                          Auct[]
  Products                       Product[]
  Cartela                        Cartela[]
  Transaction                    Transaction[]
  Clients                        Client[]
  created_at                     DateTime      @default(now())
  updated_at                     DateTime      @updatedAt
}

model Client {
  id                 String       @id @default(cuid())
  cpf                String
  name               String
  email              String       @unique
  password           String
  address            String
  client_avatar      Int?
  nickname           String?
  credit_cards       CreditCard[]
  subscribed_auct    Auct[]
  Bid                Bid[]
  client_url_profile String?
  Product            Product[]
  Cartela            Cartela[]
  Advertiser         Advertiser[]
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
}

model AuctDateGroups {
  id           String     @id @default(cuid())
  date_auct    DateTime
  group_status AuctStatus
  hour         String
  group        String
  Auct         Auct?      @relation(fields: [auctId], references: [id])
  auctId       String?
}

model Auct {
  id                        String           @id @default(cuid())
  nano_id                   String?          @unique
  categorie                 String?
  Advertiser                Advertiser?      @relation(fields: [advertiser_id], references: [id])
  advertiser_id             String?
  creator_id                String
  client_id                 String?
  subscribed_clients        Client[]
  Bids                      Bid[]
  Cartelas                  Cartela[]
  title                     String
  tags                      String[]
  auct_cover_img            String
  product_list              Product[]
  descriptions_informations String
  terms_conditions          String
  auct_dates                AuctDateGroups[]
  limit_client              Boolean
  limit_date                Boolean
  accept_payment_methods    PaymentMethod[]
  value                     String
  status                    AuctStatus
  product_timer_seconds     Int
  created_at                DateTime         @default(now())
  updated_at                DateTime         @updatedAt
}

model CreditCard {
  id             String      @id @default(cuid())
  cardNumber     String
  cardHolderName String
  expirationDate String
  cvv            String
  cardType       CardType
  Admin          Admin?      @relation(fields: [admin_id], references: [id])
  admin_id       String?
  Advertiser     Advertiser? @relation(fields: [advertiser_id], references: [id])
  advertiser_id  String?
  Client         Client?     @relation(fields: [client_id], references: [id])
  client_id      String?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model Product {
  id                String      @id @default(cuid())
  lote              Int
  auct_nanoid       String?
  Advertiser        Advertiser? @relation(fields: [advertiser_id], references: [id])
  advertiser_id     String?
  owner_id          String?
  Winner            Client?     @relation(fields: [winner_id], references: [id])
  winner_id         String?
  group             String?
  Auct              Auct?       @relation(fields: [auct_id], references: [id])
  auct_id           String?
  title             String
  description       String
  categorie         String
  initial_value     Int
  reserve_value     Int
  width             Int
  height            Int
  weight            Float
  cover_img_url     String?
  group_imgs_url    String[]
  Bid               Bid[]
  highlight_product Boolean?
  Cartela           Cartela?    @relation(fields: [cartela_id], references: [id])
  cartela_id        String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model Bid {
  id         String    @id @default(cuid())
  value      Int
  Client     Client?   @relation(fields: [client_id], references: [id])
  client_id  String?
  Auct       Auct?     @relation(fields: [auct_id], references: [id])
  auct_id    String?
  Product    Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Cartela {
  id             String        @id @default(cuid())
  advertiser_id  String
  client_id      String
  Advertiser     Advertiser    @relation(fields: [advertiser_id], references: [id])
  Client         Client        @relation(fields: [client_id], references: [id])
  Auct           Auct          @relation(fields: [auction_id], references: [id])
  auction_id     String
  products       Product[]
  amount         Float
  status         CartelaStatus
  tracking_code  String?
  Transaction    Transaction?  @relation("CartelaToTransaction")
  transaction_id String?       @unique
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Transaction {
  id              String        @id @default(cuid())
  amount          Float
  Advertiser      Advertiser    @relation(fields: [advertiser_id], references: [id])
  advertiser_id   String
  auction_cartela Cartela?      @relation("CartelaToTransaction", fields: [cartela_id], references: [id])
  cartela_id      String?       @unique
  payment_method  PaymentMethod
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

enum CartelaStatus {
  PENDENT
  PAYMENT_CONFIRMED
  PROCESS
  SENDED
  DELIVERED
  DENIED
}

enum CardType {
  Visa
  MasterCard
  AmericanExpress
  Discover
  Elo
  DEFAULT
}

enum PaymentMethod {
  Credit
  Debit
  Pix
  Ticket
}

enum AuctStatus {
  cataloged
  live
  canceled
  finished
  paused
  pending
}
