// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                String       @id @default(cuid())
  name              String
  email             String       @unique
  password          String
  address           String
  admin_url_profile String?
  credit_cards      CreditCard[]
  balance           Float?
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
}

model Moderator {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  moderator_url_profile String
  password              String
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

model Advertiser {
  id                             String         @id @default(cuid())
  amount                         Float?
  nano_id                        String         @unique
  name                           String
  CPF                            String
  company_name                   String
  CNPJ                           String?
  url_profile_cover              String?
  url_profile_company_logo_cover String?
  company_adress                 String
  email                          String         @unique
  password                       String
  address                        String
  credit_cards                   CreditCard[]
  Aucts                          Auct[]
  Products                       Product[]
  Cartela                        Cartela[]
  Transaction                    Transaction[]
  Clients                        Client[]
  SiteTemplate                   SiteTemplate[]
  police_status                  PoliceStatus?  @default(REGULAR)
  created_at                     DateTime       @default(now())
  updated_at                     DateTime       @updatedAt
}

model Client {
  id                 String       @id @default(cuid())
  cpf                String
  name               String
  email              String       @unique
  password           String
  address            String
  client_avatar      Int?
  nickname           String?
  credit_cards       CreditCard[]
  subscribed_auct    Auct[]
  Bid                Bid[]
  client_url_profile String?
  Product            Product[]
  Cartela            Cartela[]
  Advertiser         Advertiser[]
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
}

model AuctDateGroups {
  id           String     @id @default(cuid())
  date_auct    DateTime
  group_status AuctStatus
  hour         String
  group        String
  Auct         Auct?      @relation(fields: [auctId], references: [id])
  auctId       String?
}

model Auct {
  id                        String           @id @default(cuid())
  nano_id                   String?          @unique
  categorie                 String?
  Advertiser                Advertiser?      @relation(fields: [advertiser_id], references: [id])
  advertiser_id             String?
  creator_id                String
  client_id                 String?
  subscribed_clients        Client[]
  Bids                      Bid[]
  Cartelas                  Cartela[] 
  title                     String
  tags                      String[]
  auct_cover_img            String
  product_list              Product[]
  descriptions_informations String
  terms_conditions          String
  auct_dates                AuctDateGroups[]
  limit_client              Boolean
  limit_date                Boolean
  accept_payment_methods    PaymentMethod[]
  value                     String
  status                    AuctStatus
  product_timer_seconds     Int
  public                    Boolean?         @default(false)
  created_at                DateTime         @default(now())
  updated_at                DateTime         @updatedAt
}

model CreditCard {
  id             String      @id @default(cuid())
  cardNumber     String
  cardHolderName String
  expirationDate String
  cvv            String
  cardType       CardType
  Admin          Admin?      @relation(fields: [admin_id], references: [id])
  admin_id       String?
  Advertiser     Advertiser? @relation(fields: [advertiser_id], references: [id])
  advertiser_id  String?
  Client         Client?     @relation(fields: [client_id], references: [id])
  client_id      String?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model Product {
  id                String      @id @default(cuid())
  lote              Int
  auct_nanoid       String?
  Advertiser        Advertiser? @relation(fields: [advertiser_id], references: [id])
  advertiser_id     String?
  owner_id          String?
  Winner            Client?     @relation(fields: [winner_id], references: [id])
  winner_id         String?
  group             String?
  Auct              Auct?       @relation(fields: [auct_id], references: [id])
  auct_id           String?
  title             String
  description       String
  categorie         String
  initial_value     Int
  reserve_value     Int
  real_value        Int
  width             Int
  height            Int
  weight            Float
  cover_img_url     String?
  group_imgs_url    String[]
  Bid               Bid[]
  highlight_product Boolean?
  Cartela           Cartela?    @relation(fields: [cartela_id], references: [id])
  cartela_id        String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
}

model Bid {
  id         String    @id @default(cuid())
  value      Int
  Client     Client?   @relation(fields: [client_id], references: [id])
  client_id  String?
  Auct       Auct?     @relation(fields: [auct_id], references: [id])
  auct_id    String?
  Product    Product[]
  cover_auto Boolean?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Cartela {
  id             String        @id @default(cuid())
  advertiser_id  String
  client_id      String
  Advertiser     Advertiser    @relation(fields: [advertiser_id], references: [id])
  Client         Client        @relation(fields: [client_id], references: [id])
  Auct           Auct          @relation(fields: [auction_id], references: [id])
  auction_id     String
  products       Product[]
  amount         Float
  status         CartelaStatus
  tracking_code  String?
  Transaction    Transaction?  @relation("CartelaToTransaction")
  transaction_id String?       @unique
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Transaction {
  id                  String        @id @default(cuid())
  amount              Float
  advertiser_earnings Float?
  admin_earnings      Float?
  Advertiser          Advertiser    @relation(fields: [advertiser_id], references: [id])
  advertiser_id       String
  auction_cartela     Cartela?      @relation("CartelaToTransaction", fields: [cartela_id], references: [id])
  cartela_id          String?       @unique
  payment_method      PaymentMethod
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
}

enum CartelaStatus {
  PENDENT
  PAYMENT_CONFIRMED
  PROCESS
  SENDED
  DELIVERED
  DENIED
}

enum CardType {
  Visa
  MasterCard
  AmericanExpress
  Discover
  Elo
  DEFAULT
}

enum PaymentMethod {
  Credit
  Debit
  Pix
  Ticket
}

enum AuctStatus {
  cataloged
  live
  canceled
  finished
  paused
  pending
}

enum PoliceStatus {
  REGULAR
  WARNED
  SUSPENDED
  BANNED
  UNDER_REVIEW
}

// TEMPLATE MODELS AND ENUMS .............................................................

model SiteTemplate {
  id           String            @id @default(uuid())
  advertiser   Advertiser        @relation(fields: [advertiserId], references: [id])
  advertiserId String
  colorPalette ColorPalette
  fontStyle    String
  header       TemplateHeader?   @relation(fields: [headerId], references: [id], onDelete: Cascade)
  headerId     String?           @unique
  sections     TemplateSection[]
  footer       TemplateFooter?   @relation(fields: [footerId], references: [id], onDelete: Cascade)
  footerId     String            @unique
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
}

enum HeaderModel {
  MODEL_1
  MODEL_2
  MODEL_3
  MODEL_4
  MODEL_5
  MODEL_6
  MODEL_7
  MODEL_8
}

model TemplateHeader {
  id                        String          @id @default(uuid())
  color                     String
  sizeType                  SizeType
  model                     HeaderModel
  backgroundImage           String?
  backgroundImageOpacity    Float
  backgroundImageBlur       Int
  backgroundImageBrightness Int
  elementsOpacity           Float
  texts                     HeaderText[]
  carousel                  HeaderCarousel?
  siteTemplate              SiteTemplate?
  created_at                DateTime        @default(now())
  updated_at                DateTime        @updatedAt
}

model HeaderText {
  id                String         @id @default(uuid())
  title             String
  content           String
  positionTop       String
  positionLeft      String
  positionWidth     String
  titleBackground   String
  titleColor        String
  contentColor      String
  titleSize         String
  titleBorderRadius String
  visible           Boolean
  header            TemplateHeader @relation(fields: [headerId], references: [id], onDelete: Cascade)
  headerId          String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
}

model HeaderCarousel {
  id                String         @id @default(uuid())
  enabled           Boolean
  title             String
  selectedAuctId    String?
  sizeWidth         String
  sizeHeight        String
  itemsToShow       Int
  speed             Int
  positionTop       String
  positionLeft      String
  showTitle         Boolean
  showPrice         Boolean
  showCarouselTitle Boolean
  showNavigation    Boolean
  header            TemplateHeader @relation(fields: [headerId], references: [id], onDelete: Cascade)
  headerId          String         @unique
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
}

model TemplateFooter {
  id              String        @id @default(uuid())
  color           String
  sizeType        SizeType
  companyName     String
  showSocialLinks Boolean
  textColor       String
  borderColor     String
  elementsOpacity Float
  sections        Json[] // Alterado para array de seções
  socialMedia     Json[] // Novo campo para redes sociais
  siteTemplate    SiteTemplate?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model TemplateSection {
  id             String       @id @default(uuid())
  type           SectionType
  color          String
  sizeType       SizeType
  config         Json?
  siteTemplate   SiteTemplate @relation(fields: [siteTemplateId], references: [id], onDelete: Cascade)
  siteTemplateId String
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model ConfigSection {
  id                 String           @id @default(uuid())
  selectedAuctId     String?
  layout             LayoutType?
  itemsPerRow        Int?
  showPrice          Boolean?
  showTitle          Boolean?
  autoplay           Boolean?
  speed              Int?
  content            String?
  alignment          AlignmentType?
  fontSize           String?
  textColor          String?
  preserveLineBreaks Boolean?
  destination        DestinationType?
  whatsappNumber     String?
  email              String?
  buttonText         String?
  successMessage     String?
  fields             Json[]
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
}

enum SectionType {
  PRODUCT_CAROUSEL
  FORM
  GALLERY
  AUCT_LIST
  TEXT
  TESTIMONIALS
}

enum SizeType {
  SMALL
  MEDIUM
  FULL
}

enum ColorPalette {
  CLEAN
  CANDY
  DARK
  MONOCHROMATIC
}

enum LayoutType {
  GRID
  CAROUSEL
  LIST
}

enum AlignmentType {
  LEFT
  CENTER
  RIGHT
}

enum DestinationType {
  WHATSAPP
  EMAIL
}
